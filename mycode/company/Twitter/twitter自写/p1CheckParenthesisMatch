//Time Complexity O(n), Space Complexity O(n)
class Solution {
  public boolean isValid(String s) {
      if (s.isEmpty()) {
        return true;
      }
      Deque<Character> stack = new LinkedList<>();
      for (int i = 0; i < s.length(); i++) {
          if (s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '[') {
              stack.offerFirst(s.charAt(i));
          } else if (s.charAt(i) == ')' && !stack.isEmpty() && stack.getFirst() == '(') {
              stack.pollFirst();
          } else if (s.charAt(i) == '}' && !stack.isEmpty() && stack.getFirst() == '{') {
              stack.pollFirst();
          } else if (s.charAt(i) == ']' && !stack.isEmpty() && stack.getFirst() == '[') {
              stack.pollFirst();
          } else {
              return false;
          }
      }
      return stack.isEmpty();
  }
}
